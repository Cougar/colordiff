==== //eng/main/src/perl/third/Proc-Simple-1.19/Simple.pm#1 (binary+D) - //eng/main/src/perl/third/Proc-Simple-1.19/Simple.pm#6 (text) ==== content
24c24,30
<    $myproc = Proc::Simple->new();        # Create a new process object
---
>    $myproc = Proc::Simple->new(reap_only_on_poll => 0);
>                                          # Create a new process object
> 
>    $myproc = Proc::Simple->new();
>                                          # Create a new process object
>                                          # with THE_REAPER sigchld handler
>                                          # disabled. SEE WARNING BELOW
49,51d54
< 
<    Proc::Simple::debug($level);          # Turn debug on
< 
57c60
<    $myproc = Proc::Simple->new();
---
>    $myproc = Proc::Simple->new(reap_only_on_poll => 0);
86c89,105
< and returns I<1> if it is, I<0> if it's not. Finally, 
---
> and returns I<1> if it is, I<0> if it's not.
> 
> If the user is going to wait for the process to end by calling poll()
> until exit then it is much safer to create the process as follows:
> 
>    $myproc = Proc::Simple->new(reap_only_on_poll => 1);
> 
> OR
> 
>    $myproc = Proc::Simple->new();
> 
> This will avoid signal handling bugginess by not making THE_REAPER the
> handler for SIGCHLD. THE_REAPER will then only be called from poll().
> WARNING: If you don't wait for your processes to end with poll
> this will leave zombie children.
> 
> Finally,
112a132,135
> use English;
> use Log::Log4perl;
> my $log = Log::Log4perl->get_logger(__PACKAGE__);
> 
120c143
< # Globals: Debug and the mysterious waitpid nohang constant.
---
> # Globals: The mysterious waitpid nohang constant.
122d144
< my $Debug = 0;
142,143c164
< 
< It takes no arguments.
---
>   $proc = Proc::Simple->new(reap_only_on_poll => 0);
150c171
< sub new { 
---
> sub new {
154,160c175,181
<   my $self  = {};
<   
<   # Init instance variables
<   $self->{'kill_on_destroy'}   = undef;
<   $self->{'signal_on_destroy'} = undef;
<   $self->{'pid'}               = undef;
< 
---
>   my $self  = {
>                kill_on_destroy => undef,
>                signal_on_destroy => undef,
>                pid => undef,
>                reap_only_on_poll => 1,
>                @_ #override defaults
>               };
236,237c257,260
<   # Reap Zombies automatically
<   $SIG{'CHLD'} = \&THE_REAPER;
---
>   if (!$self->{reap_only_on_poll}) {
>     # Reap Zombies automatically
>     $SIG{'CHLD'} = \&THE_REAPER;
>   }
249c272
<       $self->dprt("START($self->{'pid'})");
---
>       $log->debug("forked pid $self->{pid}");
285c308,309
<           $self->dprt("POLL($self->{'pid'}) RESPONDING");
---
>           #$log->debug("kill(0,$self->{pid} succeeded");
>           #too noisy to always log
288c312
<           $self->dprt("POLL($self->{'pid'}) NOT RESPONDING");
---
>           $log->debug("kill(0, $self->{pid}) failed: $ERRNO");
291c315
<      $self->dprt("POLL(NOT DEFINED)");
---
>      $log->debug("pid not defined.");
296d319
< 
331c354
<       $self->dprt("KILL($self->{'pid'}) OK");
---
>       $log->debug("kill($sig, $self->{'pid'}) OK");
333c356
<       $self->dprt("KILL($self->{'pid'}) failed");
---
>       $log->debug("kill(0,$self->{'pid'}) failed: $ERRNO");
438c461
<         $self->dprt("Kill on DESTROY");
---
>         $log->debug("Kill on DESTROY");
442c465
<             $self->dprt("Sending KILL");
---
>             $log->debug("Sending KILL");
446,447c469,474
<     delete $EXIT_STATUS{ $self->pid };
<     $DESTROYED{ $self->pid } = 1;
---
> 
>     if (!defined $self->{reap_only_on_poll}) {
>       $log->debug("deleting exit status for $self->{pid}");
>       delete $EXIT_STATUS{ $self->pid };
>       $DESTROYED{ $self->pid } = 1;
>     }
464a492,493
>         $self->THE_REAPER();
> 
498c527
<                 dprt("", "Reaped: $pid");
---
>                 $log->debug("Reaped in destructor: $pid");
501c530
<         
---
> 
503d531
<             dprt("", "Trying to reap $pid");
505c533,534
<             if(my $res = waitpid($pid, $WNOHANG) > 0) {
---
>             my $res = waitpid($pid, $WNOHANG);
>             if($res > 0) {
508c537
<                 dprt("", "Reaped: $pid");
---
>                 $log->debug("reaped pid: $pid. Result: $res. Status: $EXIT_STATUS{$pid}");
510c539,540
<                 dprt("", "waitpid returned $res");
---
>               #$log->debug("waitpid on pid $pid returned $res");
>               # too noisy
512,513c542,543
<         }
<     } else { 
---
>        }
>     } else {
525,543d554
< ######################################################################
< 
< =item debug
< 
< Switches debug messages on and off -- Proc::Simple::debug(1) switches
< them on, Proc::Simple::debug(0) keeps Proc::Simple quiet.
< 
< =cut
< 
< # Proc::Simple::debug($level) - Turn debug on/off
< sub debug { $Debug = shift; }
< 
< ######################################################################
< # Internal debug print function
< ######################################################################
< sub dprt {
<   my $self = shift;
<   print ref($self), "> @_\n" if $Debug;
< }
